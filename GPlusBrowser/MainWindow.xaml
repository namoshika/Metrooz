<controls:MetroWindow xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:vm="clr-namespace:GPlusBrowser.ViewModel"
        xmlns:ctl="clr-namespace:GPlusBrowser.Controls"
        xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d"
        x:Class="GPlusBrowser.MainWindow"
        Title="GPlusBrowser" Height="700" Width="530" x:Name="mainWindow"
        GlowBrush="{StaticResource AccentColorBrush}" Style="{DynamicResource CleanWindowStyleKey}" WindowTransitionsEnabled="False"
        DataContext="{Binding Main, Source={StaticResource Locator}}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Clean/CleanWindow.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml" />
                <ResourceDictionary Source="Resources/Icons.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
            <vm:IntToVisibilityConverter x:Key="intToVisibilityConverter" />
            <vm:IntToIntConverter x:Key="intToIntConverter" />
            <Style x:Key="pageSwitcherStyle" TargetType="{x:Type TabControl}">
                <Setter Property="Padding" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabControl}">
                            <DockPanel x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                                <TabPanel x:Name="headerPanel" Height="0" DockPanel.Dock="Top" Visibility="Hidden" Background="Transparent" IsItemsHost="true" />
                                <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                                    <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="iconButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="circleButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Control}">
                                        <Ellipse Margin="8" SnapsToDevicePixels="True" Stroke="{DynamicResource BlackBrush}" StrokeThickness="1" StrokeDashArray="2 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Ellipse Fill="{TemplateBinding Background}" Margin="4" StrokeThickness="0"/>
                                <Ellipse x:Name="ellipsebg" Fill="{DynamicResource BlackBrush}" Margin="4" Opacity="0" StrokeThickness="0"/>
                                <Ellipse x:Name="ellipse" Margin="4" Stroke="{TemplateBinding Foreground}" StrokeThickness="{Binding BorderThickness.Left, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Border Background="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}">
                                    <Border.OpacityMask>
                                        <VisualBrush>
                                            <VisualBrush.Visual>
                                                <ContentPresenter x:Name="content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </Border.OpacityMask>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0" From="0" To="0.3" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ellipsebg"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.5" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ellipsebg"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" TargetName="ellipse" Value="1"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter Property="Opacity" TargetName="ellipse" Value="0.5"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="#FFADADAD"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="userNameTextStyle" TargetType="{x:Type Run}">
                <Setter Property="FontWeight" Value="Bold" />
            </Style>
            <Style x:Key="postTextStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="FontSize" Value="13" />
                <Setter Property="LineHeight" Value="18.2" />
            </Style>
            <Style TargetType="{x:Type Button}">
                <Setter Property="FontWeight" Value="Bold" />
            </Style>

            <Style x:Key="accountStyle" TargetType="{x:Type TabItem}">
                <Setter Property="IsSelected" Value="{Binding IsActive}" />
                <Setter Property="ContentTemplate" Value="{DynamicResource accountTemplate}" />
            </Style>
            <Style x:Key="activityStyle" TargetType="{x:Type ListBoxItem}">
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="streamStyle" TargetType="{x:Type TabItem}">
                <Setter Property="IsSelected" Value="{Binding IsActive, Mode=OneWayToSource}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Header" Value="{Binding CircleName}" />
                <Setter Property="controls:ControlsHelper.HeaderFontSize" Value="13" />
                <Setter Property="ContentTemplate" Value="{DynamicResource streamTemplate}" />
            </Style>

            <DataTemplate x:Key="accountListTemplate" DataType="{x:Type vm:MainViewModel}">
                <ListBox DockPanel.Dock="Left" Margin="5,10,0,0" Background="Transparent" DataContext="{Binding Main, Source={StaticResource Locator}}" SelectedIndex="{Binding SelectedPageIndex, Mode=TwoWay}" ItemsSource="{Binding Pages}" ItemTemplate="{DynamicResource accountListItemTemplate}" d:DataContext="{d:DesignData /SampleData/MainViewModelSampleData.xaml}" d:DesignWidth="300" d:DesignHeight="350" />
            </DataTemplate>
            <DataTemplate x:Key="accountListItemTemplate" DataType="{x:Type vm:AccountViewModel}">
                <Button Command="{Binding ActivateCommand}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Style="{StaticResource iconButtonStyle}">
                    <DockPanel Margin="5" d:DataContext="{d:DesignData /SampleData/AccountViewModelSampleData.xaml}">
                        <Image DockPanel.Dock="Left" Width="35" Height="35" Margin="0" HorizontalAlignment="Left" Source="{Binding UserIconUrl}" VerticalAlignment="Center" />
                        <TextBlock TextWrapping="Wrap" DockPanel.Dock="Top" VerticalAlignment="Center" Margin="10,0,5,0">
                            <Run Text="{Binding UserName}" Foreground="White" />
                            <LineBreak />
                            <Run Name="mailAddressRun" Text="{Binding UserMailAddress}" Foreground="Gray" />
                        </TextBlock>
                    </DockPanel>
                </Button>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsActive}" Value="True">
                        <Setter TargetName="mailAddressRun" Property="Foreground" Value="LightGray" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsActive}" Value="False">
                        <Setter TargetName="mailAddressRun" Property="Foreground" Value="Gray" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate x:Key="accountTemplate" DataType="{x:Type vm:AccountViewModel}">
                <Grid d:DesignWidth="450" d:DesignHeight="550" d:DataContext="{d:DesignData /SampleData/AccountViewModelSampleData.xaml}">
                    <controls:MetroContentControl>
                        <Grid>
                            <Rectangle Fill="{StaticResource AccentColorBrush}" Height="42" Width="10" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,8,0,0"/>
                            <Button HorizontalAlignment="Left" VerticalAlignment="Top" Width="38" Height="38" Margin="20,4,0,0" Command="{Binding OpenAccountListCommand}" Style="{StaticResource iconButtonStyle}">
                                <Image Source="{Binding UserIconUrl}" d:IsLocked="True" />
                            </Button>
                            <TextBlock Text="{Binding UserName}" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="DarkGray" Style="{DynamicResource postTextStyle}" MinWidth="50" Margin="63,0,0,0"/>
                            <controls:MetroAnimatedSingleRowTabControl Margin="10,12,0,0" VerticalAlignment="Stretch" Padding="0" TabStripMargin="50,0,0,0">
                                <controls:MetroTabItem Header="Stream" Padding="0,0,6,0">
                                    <controls:MetroAnimatedSingleRowTabControl Margin="0,-5,0,0" DataContext="{Binding Stream}" ItemsSource="{Binding DisplayStreams}" SelectedIndex="{Binding SelectedCircleIndex}" ItemContainerStyle="{DynamicResource streamStyle}" TabStripMargin="5,0,0,0" />
                                </controls:MetroTabItem>
                                <controls:MetroTabItem Header="Notification" Padding="0,0,6,0" />
                            </controls:MetroAnimatedSingleRowTabControl>
                        </Grid>
                    </controls:MetroContentControl>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="streamTemplate" DataType="{x:Type vm:StreamViewModel}">
                <DockPanel HorizontalAlignment="Stretch" LastChildFill="False" d:DesignWidth="350" d:DesignHeight="400">
                    <Button Padding="10,6" BorderBrush="Orange" Foreground="DarkOrange" Content="ストリームの受信に失敗しました。再接続する場合はここを押してください。" BorderThickness="0,1,0,1" Visibility="{Binding IsDisconnected, Converter={StaticResource booleanToVisibilityConverter}, Mode=OneWay}" VerticalAlignment="Center" Command="{Binding ReconnectCommand}" DockPanel.Dock="Top" Style="{DynamicResource iconButtonStyle}" Margin="10,0,0,0" />
                    <ListBox DockPanel.Dock="Top" Focusable="False" Background="Transparent"
                             ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                             VirtualizingPanel.IsVirtualizing="True"
                             VirtualizingPanel.VirtualizationMode="Recycling"
                             VirtualizingPanel.ScrollUnit="Pixel"
                             BorderThickness="0" ItemsSource="{Binding Activities}"
                             ItemContainerStyle="{DynamicResource activityStyle}"/>
                </DockPanel>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:ActivityViewModel}">
                <DataTemplate.Resources>
                    <ctl:IsExpandCommentCountToStringConverter x:Key="commentExpanderHeaderConverter" />
                </DataTemplate.Resources>
                <Border x:Name="cardBorder" BorderThickness="1" Margin="8,5" Padding="10" d:DataContext="{d:DesignData /SampleData/ActivityViewModelSampleData.xaml}">
                    <i:Interaction.Triggers>
                        <ei:DataTrigger Value="True" Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}">
                            <ei:ChangePropertyAction Value="DarkGray" PropertyName="BorderBrush" TargetObject="{Binding ElementName=cardBorder}" />
                        </ei:DataTrigger>
                        <ei:DataTrigger Value="False" Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}">
                            <ei:ChangePropertyAction Value="LightGray" PropertyName="BorderBrush" TargetObject="{Binding ElementName=cardBorder}" />
                        </ei:DataTrigger>
                    </i:Interaction.Triggers>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="45" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Image Grid.Column="0" Width="40" Height="40" Margin="0,0,5,0" VerticalAlignment="Top" Source="{Binding ActorIcon}" />
                        <StackPanel Grid.Column="1">
                            <TextBlock Margin="0,0,5,5" VerticalAlignment="Center" Style="{StaticResource postTextStyle}">
                                <Run Text="{Binding PostUserName}" Style="{StaticResource userNameTextStyle}" />
                                <Span Foreground="Gray">
                                    <Run Text="-"/>
                                        <Hyperlink TextDecorations="None" Foreground="Gray" Focusable="False">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="Click">
                                                    <ei:LaunchUriOrFileAction Path="{Binding ActivityUrl}" />
                                                </i:EventTrigger>
                                                <i:EventTrigger EventName="MouseEnter">
                                                    <ei:ChangePropertyAction PropertyName="TextDecorations" Value="Underline" />
                                                </i:EventTrigger>
                                                <i:EventTrigger EventName="MouseLeave">
                                                    <ei:ChangePropertyAction PropertyName="TextDecorations" Value="None" />
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                            <Run Text="{Binding PostDate}" />
                                        </Hyperlink>
                                    <Run Text="-"/>
                                </Span>
                            </TextBlock>
                            <TextBlock Margin="0,0,0,5" ctl:InlineBehavior.Inline="{Binding PostContentInline}" TextWrapping="Wrap" Style="{StaticResource postTextStyle}" />
                            <ContentPresenter Content="{Binding AttachedContent}" />
                            <ctl:ExpandableListView ItemsSource="{Binding Comments}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch">
                                <ctl:ExpandableListView.Header>
                                    <MultiBinding Converter="{StaticResource commentExpanderHeaderConverter}">
                                        <Binding RelativeSource="{RelativeSource Self}" Path="IsExpand" />
                                        <Binding RelativeSource="{RelativeSource Self}" Path="Items.Count" />
                                    </MultiBinding>
                                </ctl:ExpandableListView.Header>
                            </ctl:ExpandableListView>
                            <StackPanel FocusManager.IsFocusScope="True" KeyboardNavigation.TabNavigation="Local" FocusVisualStyle="{x:Null}">
                                <Border BorderBrush="LightGray" BorderThickness="1">
                                    <Grid>
                                        <TextBlock Margin="4,0,4,0" FontSize="13" VerticalAlignment="Center" Foreground="LightGray" Text="コメントを追加...">
                                            <i:Interaction.Triggers>
                                                <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Deactive">
                                                    <ei:ChangePropertyAction PropertyName="Opacity" Value="1.0" />
                                                </ei:DataTrigger>
                                                <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Writing">
                                                    <ei:ChangePropertyAction PropertyName="Opacity" Value="0.0" />
                                                </ei:DataTrigger>
                                                <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Sending">
                                                    <ei:ChangePropertyAction PropertyName="Opacity" Value="0.0" />
                                                </ei:DataTrigger>
                                            </i:Interaction.Triggers>
                                        </TextBlock>
                                        <TextBox AcceptsReturn="True" BorderThickness="0" Focusable="True" FontSize="13" KeyboardNavigation.IsTabStop="True"
                                                 Text="{Binding PostCommentText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap" Opacity="0.0">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="PreviewMouseDown">
                                                    <ei:ChangePropertyAction TargetObject="{Binding}" PropertyName="ShareBoxStatus" Value="Writing" />
                                                </i:EventTrigger>
                                                <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Deactive">
                                                    <ei:ChangePropertyAction PropertyName="Padding" Value="0" />
                                                    <ei:ChangePropertyAction PropertyName="IsEnabled" Value="True" />
                                                    <ei:ChangePropertyAction PropertyName="Opacity" Value="0.0" />
                                                </ei:DataTrigger>
                                                <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Writing">
                                                    <ei:ChangePropertyAction PropertyName="Padding" Value="0,0,0,15" />
                                                    <ei:ChangePropertyAction PropertyName="IsEnabled" Value="True" />
                                                    <ei:ChangePropertyAction PropertyName="Opacity" Value="1.0" />
                                                </ei:DataTrigger>
                                                <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Sending">
                                                    <ei:ChangePropertyAction PropertyName="Padding" Value="0,0,0,15" />
                                                    <ei:ChangePropertyAction PropertyName="IsEnabled" Value="False" />
                                                    <ei:ChangePropertyAction PropertyName="Opacity" Value="1.0" />
                                                </ei:DataTrigger>
                                            </i:Interaction.Triggers>
                                            <TextBox.InputBindings>
                                                <KeyBinding Key="Enter" Modifiers="Shift" Command="{Binding SendCommentCommand}" />
                                                <KeyBinding Key="Escape" Command="{Binding CancelCommentCommand}" />
                                            </TextBox.InputBindings>
                                        </TextBox>
                                    </Grid>
                                </Border>
                                <StackPanel Margin="0,5,0,0" Visibility="Collapsed" Orientation="Horizontal">
                                    <i:Interaction.Triggers>
                                        <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Deactive">
                                            <ei:ChangePropertyAction PropertyName="Visibility" Value="Collapsed" />
                                        </ei:DataTrigger>
                                        <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Writing">
                                            <ei:ChangePropertyAction PropertyName="Visibility" Value="Visible" />
                                        </ei:DataTrigger>
                                        <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Sending">
                                            <ei:ChangePropertyAction PropertyName="Visibility" Value="Visible" />
                                        </ei:DataTrigger>
                                    </i:Interaction.Triggers>
                                    <Button Padding="10,3,10,3" Margin="0,0,8,0" Content="コメントを投稿" Focusable="True" KeyboardNavigation.IsTabStop="True" Command="{Binding SendCommentCommand}">
                                        <i:Interaction.Triggers>
                                            <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Deactive">
                                                <ei:ChangePropertyAction PropertyName="IsEnabled" Value="True" />
                                            </ei:DataTrigger>
                                            <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Writing">
                                                <ei:ChangePropertyAction PropertyName="IsEnabled" Value="True" />
                                            </ei:DataTrigger>
                                            <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Sending">
                                                <ei:ChangePropertyAction PropertyName="IsEnabled" Value="False" />
                                            </ei:DataTrigger>
                                        </i:Interaction.Triggers>
                                        <Button.InputBindings>
                                            <KeyBinding Key="Escape" Command="{Binding CancelCommentCommand}" />
                                        </Button.InputBindings>
                                    </Button>
                                    <Button Padding="10,3,10,3" Margin="0,0,8,0" Content="キャンセル" Focusable="True" KeyboardNavigation.IsTabStop="True" Command="{Binding CancelCommentCommand}">
                                        <i:Interaction.Triggers>
                                            <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Deactive">
                                                <ei:ChangePropertyAction PropertyName="IsEnabled" Value="True" />
                                            </ei:DataTrigger>
                                            <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Writing">
                                                <ei:ChangePropertyAction PropertyName="IsEnabled" Value="True" />
                                            </ei:DataTrigger>
                                            <ei:DataTrigger Binding="{Binding ShareBoxStatus}" Value="Sending">
                                                <ei:ChangePropertyAction PropertyName="IsEnabled" Value="False" />
                                            </ei:DataTrigger>
                                        </i:Interaction.Triggers>
                                        <Button.InputBindings>
                                            <KeyBinding Key="Escape" Command="{Binding CancelCommentCommand}" />
                                        </Button.InputBindings>
                                    </Button>
                                </StackPanel>
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </Border>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:CommentViewModel}">
                <Border BorderBrush="LightGray" BorderThickness="0,1,0,0" Padding="0,5,5,5">
                    <StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Image Width="25" Height="25" SnapsToDevicePixels="True" Source="{Binding ActorIcon}" />
                            <TextBlock Margin="5,0,0,0" VerticalAlignment="Center" Style="{StaticResource postTextStyle}"><Run Text="{Binding OwnerName}" Style="{StaticResource userNameTextStyle}" /><Run Foreground="Gray" Text="{Binding CommentDate, StringFormat=-\{0\}-}" /></TextBlock>
                        </StackPanel>
                        <TextBlock Margin="0,3,0,0" ctl:InlineBehavior.Inline="{Binding PostContentInline}" TextWrapping="Wrap" Style="{StaticResource postTextStyle}" />
                    </StackPanel>
                </Border>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AttachedLinkViewModel}">
                <Border BorderBrush="LightGray" BorderThickness="0,1,0,0" Margin="0,0,0,5" d:DataContext="{d:DesignData /SampleData/AttachedLinkViewModelSampleData.xaml}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!--<Image Grid.Column="0" Source="{Binding ThumnailUrl}" MaxWidth="150" MaxHeight="150" Stretch="Uniform" VerticalAlignment="Top" Margin="0,8,8,0" Visibility="{Binding ExistThumnailUrl, Converter={StaticResource booleanToVisibilityConverter}}" />-->
                        <TextBlock Grid.Column="1" Margin="0,8,0,0" TextWrapping="Wrap" Style="{StaticResource postTextStyle}">
                            <Hyperlink Focusable="False">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <ei:LaunchUriOrFileAction Path="{Binding AncourUrl}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                                <Run FontWeight="Bold" Text="{Binding AncourTitle}" />
                            </Hyperlink>
                            <LineBreak />
                            <Run Text="{Binding AncourIntroductionText}" />
                        </TextBlock>
                    </Grid>
                </Border>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AttachedAlbumViewModel}">
                <ctl:ImageBox MaxHeight="500" Margin="0,0,0,5" ItemsSource="{Binding ThumbnailImages}" Content="{Binding SelectedImage}" />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AttachedImageViewModel}">
                <Border MaxHeight="500" Background="Black" Margin="0,0,0,5">
                    <Image Source="{Binding Image}" />
                </Border>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AttachedActivityViewModel}">
                <Border BorderBrush="LightGray" BorderThickness="0,1,0,0" Margin="0,0,0,5" Padding="0,5,0,5">
                    <StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Image Width="25" Height="25" Source="{Binding OwnerIcon}" />
                            <TextBlock Margin="5,0,0,0" VerticalAlignment="Center" Style="{StaticResource postTextStyle}"><Run Text="最初に"/><Run Text="{Binding OwnerName}" Style="{StaticResource userNameTextStyle}" /><Run Text="さんが共有"/></TextBlock>
                        </StackPanel>
                        <TextBlock Margin="0,5,0,5" ctl:InlineBehavior.Inline="{Binding PostContentInline}" TextWrapping="Wrap" Style="{StaticResource postTextStyle}" />
                        <ContentPresenter Content="{Binding AttachedContent}" />
                    </StackPanel>
                </Border>
            </DataTemplate>
        </ResourceDictionary>
    </Window.Resources>
    <controls:MetroWindow.Flyouts>
        <controls:FlyoutsControl>
            <controls:Flyout Header="Account" Background="Black" Foreground="White" IsOpen="{Binding IsAccountSelectorMode}" Position="Right" ContentTemplate="{DynamicResource accountListTemplate}" />
        </controls:FlyoutsControl>
    </controls:MetroWindow.Flyouts>
    <Grid d:DataContext="{d:DesignData /SampleData/MainViewModelSampleData.xaml}">
        <TabControl ItemsSource="{Binding Pages}" SelectedIndex="{Binding SelectedPageIndex, Mode=OneWay}" Style="{StaticResource pageSwitcherStyle}" ItemContainerStyle="{StaticResource accountStyle}" />
    </Grid>
</controls:MetroWindow>