<controls:MetroWindow xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:vm="clr-namespace:Metrooz.ViewModel"
        xmlns:ctl="clr-namespace:Metrooz.Controls"
        xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d"
        x:Class="Metrooz.MainWindow"
        Title="Metrooz" TitleCaps="False" Height="700" Width="530" x:Name="mainWindow"
        GlowBrush="{StaticResource AccentColorBrush}" Style="{DynamicResource CleanWindowStyleKey}" WindowTransitionsEnabled="False"
        DataContext="{Binding Main, Source={StaticResource Locator}}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Clean/CleanWindow.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml" />
                <ResourceDictionary Source="Resources/Icons.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
            <vm:IntToVisibilityConverter x:Key="intToVisibilityConverter" />
            <vm:IntToIntConverter x:Key="intToIntConverter" />
            <Style x:Key="pageSwitcherStyle" TargetType="{x:Type TabControl}">
                <Setter Property="Padding" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabControl}">
                            <DockPanel x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                                <TabPanel x:Name="headerPanel" Height="0" DockPanel.Dock="Top" Visibility="Hidden" Background="Transparent" IsItemsHost="true" />
                                <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                                    <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="iconButtonStyle" TargetType="{x:Type Button}">
            	<Style.Triggers>
            		<Trigger Property="IsMouseOver" Value="True">
            			<Setter Property="Opacity" Value="0.8"/>
                    </Trigger>
            		<Trigger Property="IsMouseOver" Value="False">
            			<Setter Property="Opacity" Value="1.0"/>
            		</Trigger>
            	</Style.Triggers>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="silhouetteStyle" TargetType="{x:Type ContentControl}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <Grid d:DesignWidth="50" d:DesignHeight="50">
                                <Border Background="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}">
                                    <Border.OpacityMask>
                                        <VisualBrush>
                                            <VisualBrush.Visual>
                                                <ContentPresenter x:Name="content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </Border.OpacityMask>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="userNameTextStyle" TargetType="{x:Type Run}">
                <Setter Property="FontWeight" Value="Bold" />
            </Style>
            <Style x:Key="postTextStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="FontSize" Value="13" />
                <Setter Property="LineHeight" Value="18.2" />
            </Style>
            <Style TargetType="{x:Type Button}">
                <Setter Property="FontWeight" Value="Bold" />
            </Style>

            <Style x:Key="accountStyle" TargetType="{x:Type TabItem}">
                <Setter Property="IsSelected" Value="{Binding IsActive}" />
                <Setter Property="ContentTemplate" Value="{DynamicResource accountTemplate}" />
            </Style>
            <Style x:Key="cardStyle" TargetType="{x:Type ListBoxItem}">
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="BorderBrush" Value="LightGray" />
                <Setter Property="Margin" Value="8,5" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="streamStyle" TargetType="{x:Type TabItem}">
                <Setter Property="IsSelected" Value="{Binding IsActive, Mode=OneWayToSource}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Header" Value="{Binding Name}" />
                <Setter Property="controls:ControlsHelper.HeaderFontSize" Value="13" />
            </Style>
            <Style x:Key="notificationStyle" TargetType="{x:Type TabItem}">
                <Setter Property="IsSelected" Value="{Binding IsActive, Mode=OneWayToSource}" />
            </Style>

            <DataTemplate x:Key="accountListTemplate" DataType="{x:Type vm:MainViewModel}">
                <ListBox DockPanel.Dock="Left" Margin="5,10,0,0" Background="Transparent" DataContext="{Binding Main, Source={StaticResource Locator}}" SelectedIndex="{Binding SelectedAccountIndex, Mode=TwoWay}" ItemsSource="{Binding Accounts}" ItemTemplate="{DynamicResource accountListItemTemplate}" d:DataContext="{d:DesignData /SampleData/MainViewModelSampleData.xaml}" d:DesignWidth="300" d:DesignHeight="350" />
            </DataTemplate>
            <DataTemplate x:Key="accountListItemTemplate" DataType="{x:Type vm:AccountViewModel}">
                <Button Command="{Binding ActivateCommand}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Style="{StaticResource iconButtonStyle}">
                    <DockPanel Margin="5" d:DataContext="{d:DesignData /SampleData/AccountViewModelSampleData.xaml}">
                        <Image DockPanel.Dock="Left" Width="35" Height="35" Margin="0" HorizontalAlignment="Left" Source="{Binding UserIconUrl}" VerticalAlignment="Center" />
                        <TextBlock TextWrapping="Wrap" DockPanel.Dock="Top" VerticalAlignment="Center" Margin="10,0,5,0">
                            <Run Text="{Binding UserName}" Foreground="White" />
                            <LineBreak />
                            <Run Name="mailAddressRun" Text="{Binding UserMailAddress}" Foreground="Gray" />
                        </TextBlock>
                    </DockPanel>
                </Button>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsActive}" Value="True">
                        <Setter TargetName="mailAddressRun" Property="Foreground" Value="LightGray" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsActive}" Value="False">
                        <Setter TargetName="mailAddressRun" Property="Foreground" Value="Gray" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate x:Key="accountTemplate" DataType="{x:Type vm:AccountViewModel}">
                <Grid d:DesignWidth="450" d:DesignHeight="550" d:DataContext="{d:DesignData /SampleData/AccountViewModelSampleData.xaml}">
                    <i:Interaction.Behaviors>
                        <ctl:FixedDataStateBehavior Binding="{Binding IsLoading}" Value="True" TrueState="ProggressBusy" FalseState="ProggressIddle" />
                    </i:Interaction.Behaviors>
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="ProggressStates">
                            <VisualState x:Name="ProggressIddle">
                    			<Storyboard>
                    				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                    					<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                    					<EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0"/>
                    				</DoubleAnimationUsingKeyFrames>
                    				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="progressRing">
                    					<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                    					<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                    				</DoubleAnimationUsingKeyFrames>
                    				<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="border">
                    					<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                    					<DiscreteObjectKeyFrame KeyTime="0:0:0.6" Value="{x:Static Visibility.Collapsed}"/>
                    				</ObjectAnimationUsingKeyFrames>
                    			</Storyboard>
                    		</VisualState>
                    		<VisualState x:Name="ProggressBusy">
                    			<Storyboard>
                    				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                    					<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                    				</DoubleAnimationUsingKeyFrames>
                    				<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="border">
                    					<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                    				</ObjectAnimationUsingKeyFrames>
                    				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="progressRing">
                    					<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    					<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                    				</DoubleAnimationUsingKeyFrames>
                    			</Storyboard>
                    		</VisualState>
                    	</VisualStateGroup>
                	</VisualStateManager.VisualStateGroups>
                	<controls:MetroContentControl>
                		<Grid>
                            <Image HorizontalAlignment="Left" VerticalAlignment="Top" Width="38" Height="38" Margin="20,4,0,0" Source="{Binding UserIconUrl}" />
                            <controls:MetroAnimatedSingleRowTabControl Margin="10,12,0,0" SelectedIndex="{Binding SelectedIndex}" VerticalAlignment="Stretch" Padding="0" TabStripMargin="50,0,0,0">
                                <controls:MetroTabItem Header="Stream" Padding="0,0,6,0" IsSelected="{Binding IsActive, Mode=OneWayToSource}" DataContext="{Binding Stream}">
                                    <controls:MetroAnimatedSingleRowTabControl Margin="0,-5,0,0" ItemsSource="{Binding Items}" SelectedIndex="{Binding SelectedIndex}" ItemContainerStyle="{DynamicResource streamStyle}" ContentTemplate="{DynamicResource streamTemplate}" TabStripMargin="5,0,0,0" />
                				</controls:MetroTabItem>
                                <controls:MetroTabItem Padding="0,0,6,0" DataContext="{Binding Notification}" IsSelected="{Binding IsActive}">
                                    <controls:MetroTabItem.Header>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="Notification" FontSize="26.67" />
                                            <TextBlock Text="{Binding UnreadItemCount}" FontSize="18" Foreground="{StaticResource AccentColorBrush}" Visibility="{Binding ExistUnreadItem, Converter={StaticResource booleanToVisibilityConverter}}" />
                                        </StackPanel>
                                    </controls:MetroTabItem.Header>
                                    <controls:MetroAnimatedSingleRowTabControl Margin="0,-5,0,0" ItemsSource="{Binding Items}" SelectedIndex="{Binding SelectedIndex}" ItemContainerStyle="{DynamicResource streamStyle}" ContentTemplate="{DynamicResource notificationTemplate}" TabStripMargin="5,0,0,0" />
                                </controls:MetroTabItem>
                			</controls:MetroAnimatedSingleRowTabControl>
                			<Button Width="Auto" Margin="63,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Command="{Binding OpenAccountListCommand}" Style="{DynamicResource iconButtonStyle}">
                				<StackPanel Margin="0" Orientation="Horizontal">
                					<TextBlock Foreground="DarkGray" Style="{DynamicResource postTextStyle}" MinWidth="50" Margin="0,0,2,0" Text="{Binding UserName}" />
                					<ContentControl Content="{DynamicResource appbar_settings}" Style="{DynamicResource silhouetteStyle}" Height="12" Width="12" Foreground="DarkGray"/>
                				</StackPanel>
                			</Button>
                		</Grid>
                	</controls:MetroContentControl>
                	<Border x:Name="border" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="White" d:IsHidden="True">
                		<controls:ProgressRing x:Name="progressRing" HorizontalAlignment="Stretch" Height="40" VerticalAlignment="Stretch" Width="40" IsActive="True"/>
                	</Border>
                    <Rectangle Height="42" Width="10" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,8,0,0">
                        <i:Interaction.Triggers>
                            <ei:DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="True">
                                <ei:ChangePropertyAction PropertyName="Fill" Value="{StaticResource AccentColorBrush}" />
                            </ei:DataTrigger>
                            <ei:DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="False">
                                <ei:ChangePropertyAction PropertyName="Fill" Value="LightGray" />
                            </ei:DataTrigger>
                        </i:Interaction.Triggers>
                    </Rectangle>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="streamTemplate" DataType="{x:Type vm:StreamViewModel}">
                <DataTemplate.Resources>
                    <DataTemplate DataType="{x:Type vm:ResumeButtonViewModel}">
                        <Button Margin="0" Padding="10" VerticalAlignment="Center" Command="{Binding ResumeCommand}" Style="{DynamicResource iconButtonStyle}" Background="LightGreen" d:DataContext="{d:DesignData /SampleData/ResumeStreamButtonViewModelSampleData.xaml}">
                            <TextBlock Foreground="#FF4CA84C" Text="{Binding NewItemCount, StringFormat='新着{0}件。表示する場合はここを押してください。'}" />
                        </Button>
                    </DataTemplate>
                </DataTemplate.Resources>
                <Grid d:DesignWidth="400" d:DesignHeight="300">
            		<i:Interaction.Behaviors>
                        <ctl:FixedDataStateBehavior Binding="{Binding DataContext.IsConnected, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}}" Value="True" TrueState="Connected" FalseState="Disconnected"/>
                        <ctl:FixedDataStateBehavior Binding="{Binding DataContext.IsLoading, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}}" Value="True" TrueState="ProggressBusy" FalseState="ProggressIddle"/>
                        <ctl:FixedDataStateBehavior Binding="{Binding DataContext.IsIniting, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}}" Value="True" TrueState="RenderBusy" FalseState="RenderIddle"/>
            		</i:Interaction.Behaviors>
            		<VisualStateManager.VisualStateGroups>
            			<VisualStateGroup x:Name="ProggressStates">
            				<VisualState x:Name="ProggressIddle">
            					<Storyboard>
            						<BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(ProgressBar.IsIndeterminate)" Storyboard.TargetName="metroProgressBar">
            							<DiscreteBooleanKeyFrame KeyTime="0:0:0.3" Value="False"/>
            						</BooleanAnimationUsingKeyFrames>
            						<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="border">
            							<DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Collapsed}"/>
            						</ObjectAnimationUsingKeyFrames>
            						<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="metroProgressBar">
            							<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
            							<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
            						</DoubleAnimationUsingKeyFrames>
            					</Storyboard>
            				</VisualState>
            				<VisualState x:Name="ProggressBusy">
            					<Storyboard>
            						<BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(ProgressBar.IsIndeterminate)" Storyboard.TargetName="metroProgressBar">
            							<DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
            						</BooleanAnimationUsingKeyFrames>
            						<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="border">
            							<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
            						</ObjectAnimationUsingKeyFrames>
            					</Storyboard>
            				</VisualState>
            			</VisualStateGroup>
            			<VisualStateGroup x:Name="StreamStates">
            				<VisualState x:Name="Connected">
            					<Storyboard>
            						<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="button">
            							<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
            						</ObjectAnimationUsingKeyFrames>
            					</Storyboard>
            				</VisualState>
            				<VisualState x:Name="Disconnected">
            					<Storyboard>
            						<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="button">
            							<DiscreteObjectKeyFrame KeyTime="0">
            								<DiscreteObjectKeyFrame.Value>
            									<Visibility>Visible</Visibility>
            								</DiscreteObjectKeyFrame.Value>
            							</DiscreteObjectKeyFrame>
            						</ObjectAnimationUsingKeyFrames>
            					</Storyboard>
            				</VisualState>
            			</VisualStateGroup>
            			<VisualStateGroup x:Name="RenderingStates">
            				<VisualStateGroup.Transitions>
            					<VisualTransition GeneratedDuration="0" To="RenderBusy">
            						<Storyboard>
                                        <DoubleAnimation Duration="0:0:0.15" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="listBox" From="1"/>
                                        <DoubleAnimation Duration="0:0:0.15" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="button" From="1"/>
            						</Storyboard>
            					</VisualTransition>
            					<VisualTransition From="RenderBusy" GeneratedDuration="0">
            						<Storyboard>
            							<DoubleAnimation Duration="0:0:0.15" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="listBox" From="0" To="1"/>
            							<DoubleAnimation Duration="0:0:0.15" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="button" From="0" To="1"/>
            						</Storyboard>
            					</VisualTransition>
            				</VisualStateGroup.Transitions>
            				<VisualState x:Name="RenderIddle">
            					<Storyboard>
            						<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="listBox">
            							<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
            						</DoubleAnimationUsingKeyFrames>
            						<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="button">
            							<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
            						</DoubleAnimationUsingKeyFrames>
            					</Storyboard>
            				</VisualState>
            				<VisualState x:Name="RenderBusy">
            					<Storyboard>
            						<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="listBox">
            							<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
            						</DoubleAnimationUsingKeyFrames>
            						<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="button">
            							<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
            						</DoubleAnimationUsingKeyFrames>
            					</Storyboard>
            				</VisualState>
            			</VisualStateGroup>
            		</VisualStateManager.VisualStateGroups>
            		<Grid.RowDefinitions>
            			<RowDefinition Height="Auto"/>
            			<RowDefinition Height="*"/>
            		</Grid.RowDefinitions>
            		<Button x:Name="button" Padding="10,6" BorderBrush="Orange" Foreground="DarkOrange" Content="ストリームの受信に失敗しました。再接続する場合はここを押してください。" BorderThickness="0,1,0,1" VerticalAlignment="Center" Command="{Binding ReconnectCommand}" Style="{DynamicResource iconButtonStyle}" Grid.Row="0" Margin="5,0" />
                    <ListBox x:Name="listBox" Focusable="False" Background="Transparent"
            			     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                             ScrollViewer.VerticalScrollBarVisibility="Visible"
            			     VirtualizingPanel.IsVirtualizing="True"
            			     VirtualizingPanel.VirtualizationMode="Standard"
            			     VirtualizingPanel.ScrollUnit="Pixel"
            			     BorderThickness="0" ItemsSource="{Binding Activities}"
            			     ItemContainerStyle="{DynamicResource cardStyle}" Grid.RowSpan="1" Grid.Row="1">
                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel IsItemsHost="True">
                                    <i:Interaction.Behaviors>
                                        <ctl:ScrollBehavior VerticalOffset="{Binding ScrollOffset, Mode=OneWayToSource}" />
                                    </i:Interaction.Behaviors>
                                </VirtualizingStackPanel>
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                    </ListBox>
            		<Border x:Name="border" HorizontalAlignment="Stretch" Grid.RowSpan="2" VerticalAlignment="Stretch" >
            			<controls:MetroProgressBar x:Name="metroProgressBar" VerticalAlignment="Top" IsIndeterminate="True" Foreground="{StaticResource AccentColorBrush}" />
            		</Border>
            	</Grid>
            </DataTemplate>
            <DataTemplate x:Key="notificationTemplate" DataType="{x:Type vm:NotificationManagerViewModel}">
                <Grid d:DesignWidth="400" d:DesignHeight="500">
                	<i:Interaction.Behaviors>
                		<ctl:FixedDataStateBehavior Binding="{Binding IsLoading}" Value="True" TrueState="ProggressBusy" FalseState="ProggressIddle"/>
                	</i:Interaction.Behaviors>
                	<VisualStateManager.VisualStateGroups>
                		<VisualStateGroup x:Name="ProggressStates">
                			<VisualState x:Name="ProggressIddle">
                				<Storyboard>
                					<BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(ProgressBar.IsIndeterminate)" Storyboard.TargetName="metroProgressBar">
                						<DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
                						<DiscreteBooleanKeyFrame KeyTime="0:0:0.3" Value="False"/>
                					</BooleanAnimationUsingKeyFrames>
                					<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="metroProgressBar">
                						<DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Collapsed}"/>
                					</ObjectAnimationUsingKeyFrames>
                					<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="metroProgressBar">
                						<EasingDoubleKeyFrame KeyTime="0" Value="0.995"/>
                						<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                					</DoubleAnimationUsingKeyFrames>
                				</Storyboard>
                			</VisualState>
                			<VisualState x:Name="ProggressBusy">
                				<Storyboard>
                					<BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(ProgressBar.IsIndeterminate)" Storyboard.TargetName="metroProgressBar">
                						<DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
                					</BooleanAnimationUsingKeyFrames>
                					<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="metroProgressBar">
                						<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                					</ObjectAnimationUsingKeyFrames>
                				</Storyboard>
                			</VisualState>
                		</VisualStateGroup>
                	</VisualStateManager.VisualStateGroups>
                    <ListBox x:Name="listBox" Focusable="False" Grid.Row="0"
                             ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                             ScrollViewer.VerticalScrollBarVisibility="Visible"
                             VirtualizingPanel.IsVirtualizing="True"
                             VirtualizingPanel.VirtualizationMode="Standard"
                             VirtualizingPanel.ScrollUnit="Pixel"
                             ItemsSource="{Binding Items}"
            			     ItemContainerStyle="{DynamicResource cardStyle}" />
                    <controls:MetroProgressBar x:Name="metroProgressBar" HorizontalAlignment="Stretch" VerticalAlignment="Top" Foreground="{StaticResource AccentColorBrush}"/>
                    <TextBlock HorizontalAlignment="Center" TextWrapping="Wrap" Text="All caught up!" VerticalAlignment="Center" FontSize="18" Visibility="{Binding NoItem, Converter={StaticResource booleanToVisibilityConverter}}" Margin="0,-100,0,0" Foreground="LightGray"/>
                </Grid>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:ActivityViewModel}">
                <DataTemplate.Resources>
                    <ctl:IsExpandCommentCountToStringConverter x:Key="commentExpanderHeaderConverter" />
                </DataTemplate.Resources>
                <Grid Margin="10" d:DataContext="{d:DesignData /SampleData/ActivityViewModelSampleData.xaml}">
                    <i:Interaction.Behaviors>
                        <ctl:FixedDataStateBehavior Binding="{Binding ShareBoxStatus, Mode=OneWay}" Value="Deactive" TrueState="ShareBoxDeactive" FalseState="ShareBoxActive"/>
                        <ctl:FixedDataStateBehavior Binding="{Binding ShareBoxStatus, Mode=OneWay}" Value="Sending" TrueState="ShareBoxBusy" FalseState="ShareBoxIddle"/>
                    </i:Interaction.Behaviors>
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="ShareBoxStates">
                            <VisualState x:Name="ShareBoxDeactive">
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="textBox">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Control.Padding)" Storyboard.TargetName="textBox">
                                        <EasingThicknessKeyFrame KeyTime="0" Value="0"/>
                                    </ThicknessAnimationUsingKeyFrames>
                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="stackPanel">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="ShareBoxActive">
                                <Storyboard>
                                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(Control.Padding)" Storyboard.TargetName="textBox">
                                        <EasingThicknessKeyFrame KeyTime="0" Value="0,0,0,15"/>
                                    </ThicknessAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="textBox">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="stackPanel">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup x:Name="ShareBoxWorkStates">
                            <VisualState x:Name="ShareBoxIddle">
                                <Storyboard>
                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsEnabled)" Storyboard.TargetName="shareBoxPanel">
                                    	<DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                            <VisualState x:Name="ShareBoxBusy">
                            	<Storyboard>
                            		<BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsEnabled)" Storyboard.TargetName="shareBoxPanel">
                            			<DiscreteBooleanKeyFrame KeyTime="0" Value="False"/>
                            		</BooleanAnimationUsingKeyFrames>
                            	</Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="45" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Image Grid.Column="0" Width="40" Height="40" Margin="0,0,5,0" VerticalAlignment="Top" Source="{Binding ActorIcon}" />
                    <StackPanel Grid.Column="1">
                        <TextBlock Margin="0,0,5,5" VerticalAlignment="Center" Style="{StaticResource postTextStyle}">
                            <Run Text="{Binding PostUserName}" Style="{StaticResource userNameTextStyle}" />
                            <Span Foreground="Gray">
                                <Run Text="-"/>
                                <Hyperlink TextDecorations="None" Foreground="Gray" Focusable="False">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Click">
                                            <ei:LaunchUriOrFileAction Path="{Binding ActivityUrl}" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseEnter">
                                            <ei:ChangePropertyAction PropertyName="TextDecorations" Value="Underline" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="MouseLeave">
                                            <ei:ChangePropertyAction PropertyName="TextDecorations" Value="None" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                    <Run Text="{Binding PostDate}" />
                                </Hyperlink>
                            </Span>
                        </TextBlock>
                        <TextBlock Margin="0,0,0,5" TextWrapping="Wrap" Style="{StaticResource postTextStyle}" >
            				<i:Interaction.Behaviors>
            					<ctl:SetInlineBehavior Element="{Binding PostContentInline}"/>
            				</i:Interaction.Behaviors>
                        </TextBlock>
                        <ContentPresenter Content="{Binding AttachedContent}" />
                        <Border Grid.Row="0" BorderThickness="0,0,0,1" BorderBrush="LightGray">
                            <ToggleButton Height="30" IsChecked="{Binding IsCheckedCommentsHeader, Mode=OneWayToSource}"
            					          Visibility="{Binding IsEnableCommentsHeader, Converter={StaticResource booleanToVisibilityConverter}}" FontSize="13" FontWeight="Bold" Padding="5,0">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,1,0,0" Background="#f0f0f0">
                                            <ContentPresenter Margin="{TemplateBinding Padding}" />
                                        </Border>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                                <Grid>
                                    <TextBlock VerticalAlignment="Center">
                                        <TextBlock.Text>
                                            <MultiBinding Converter="{StaticResource commentExpanderHeaderConverter}">
                                                <Binding Path="IsOpenedCommentList" />
                                                <Binding Path="CommentLength" />
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                    <controls:ProgressRing IsActive="{Binding IsLoadingCommentList}" Width="22" Height="22" HorizontalAlignment="Right" />
                                </Grid>
                            </ToggleButton>
                        </Border>
                        <ctl:ExpandableListView x:Name="commentList" IsExpand="{Binding IsOpenedCommentList}" ItemsSource="{Binding Comments}" HorizontalContentAlignment="Stretch" />
                        <StackPanel x:Name="shareBoxPanel" FocusManager.IsFocusScope="True" KeyboardNavigation.TabNavigation="Local" FocusVisualStyle="{x:Null}">
                            <Border BorderBrush="LightGray" BorderThickness="1,0,1,1">
                                <Grid>
                                    <TextBlock Margin="4,0,4,0" FontSize="13" VerticalAlignment="Center" Foreground="LightGray" Text="コメントを追加..." />
                                    <TextBox x:Name="textBox" AcceptsReturn="True" BorderThickness="0" Focusable="True" FontSize="13" KeyboardNavigation.IsTabStop="True"
            							Text="{Binding PostCommentText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="PreviewMouseDown">
                                                <ei:ChangePropertyAction TargetObject="{Binding}" PropertyName="ShareBoxStatus" Value="Writing" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                        <TextBox.InputBindings>
                                            <KeyBinding Key="Enter" Modifiers="Shift" Command="{Binding SendCommentCommand}" />
                                            <KeyBinding Key="Escape" Command="{Binding CancelCommentCommand}" />
                                        </TextBox.InputBindings>
                                    </TextBox>
                                </Grid>
                            </Border>
                            <StackPanel x:Name="stackPanel" Margin="0,5,0,0" Orientation="Horizontal">
                                <Button Padding="10,3,10,3" Margin="0,0,8,0" Content="コメントを投稿" Focusable="True" KeyboardNavigation.IsTabStop="True" Command="{Binding SendCommentCommand}">
                                    <Button.InputBindings>
                                        <KeyBinding Key="Escape" Command="{Binding CancelCommentCommand}" />
                                    </Button.InputBindings>
                                </Button>
                                <Button Padding="10,3,10,3" Margin="0,0,8,0" Content="キャンセル" Focusable="True" KeyboardNavigation.IsTabStop="True" Command="{Binding CancelCommentCommand}">
                                    <Button.InputBindings>
                                        <KeyBinding Key="Escape" Command="{Binding CancelCommentCommand}" />
                                    </Button.InputBindings>
                                </Button>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                </Grid>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:CommentViewModel}">
                <Border BorderBrush="LightGray" BorderThickness="0,0,0,1" Padding="0,5,5,5" d:DataContext="{d:DesignData /SampleData/CommentViewModelSampleData.xaml}">
                    <StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Image Width="25" Height="25" SnapsToDevicePixels="True" Source="{Binding ActorIcon}" />
                            <TextBlock Margin="5,0,0,0" VerticalAlignment="Center" Style="{StaticResource postTextStyle}">
                                <Run Text="{Binding OwnerName}" Style="{StaticResource userNameTextStyle}" />
                                <Span Foreground="Gray">
                                    <Run Text="-" />
                                    <Run Text="{Binding CommentDate}" />
                                </Span>
                            </TextBlock>
                        </StackPanel>
                        <TextBlock Margin="0,3,0,0" TextWrapping="Wrap" Style="{StaticResource postTextStyle}" >
                        	<i:Interaction.Behaviors>
                        		<ctl:SetInlineBehavior Element="{Binding PostContentInline}"/>
                        	</i:Interaction.Behaviors>
                        </TextBlock>
                    </StackPanel>
                </Border>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AttachedLinkViewModel}">
                <Border BorderBrush="LightGray" BorderThickness="0,1,0,0" Margin="0,0,0,5" Padding="0,8,0,0" d:DataContext="{d:DesignData /SampleData/AttachedLinkViewModelSampleData.xaml}" d:DesignWidth="300" d:DesignHeight="120">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Image Grid.Column="0" Source="{Binding ThumnailUrl}" Visibility="{Binding HasThumb, Converter={StaticResource booleanToVisibilityConverter}}" MaxWidth="{Binding ThumbWidth}" MaxHeight="{Binding ThumbHeight}" Stretch="Uniform" VerticalAlignment="Top" Margin="0,0,5,0" />
                        <TextBlock Grid.Column="1" TextWrapping="Wrap" Style="{StaticResource postTextStyle}">
                            <Hyperlink Focusable="False">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <ei:LaunchUriOrFileAction Path="{Binding AncourUrl}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                                <Run FontWeight="Bold" Text="{Binding AncourTitle}" />
                            </Hyperlink>
                            <LineBreak />
                            <Run Text="{Binding AncourIntroductionText}" />
                        </TextBlock>
                    </Grid>
                </Border>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AttachedYouTubeViewModel}">
                <Grid Margin="0,0,0,5" Background="Black" Cursor="Hand" d:DataContext="{d:DesignData /SampleData/AttachedLinkViewModelSampleData.xaml}" d:DesignWidth="530" d:DesignHeight="300">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonDown">
                            <ei:LaunchUriOrFileAction Path="{Binding AncourUrl}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <Image Source="{Binding ThumnailUrl}" Stretch="Uniform" MaxWidth="{Binding ThumbWidth}" MaxHeight="{Binding Binding ThumbHeight}"/>
            		<TextBlock TextWrapping="Wrap" Style="{StaticResource postTextStyle}" VerticalAlignment="Bottom" Padding="10" Margin="0" Foreground="White">
            			<TextBlock.Background>
            				<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
            					<GradientStop Color="Black" Offset="1"/>
            					<GradientStop Color="#00000000"/>
            				</LinearGradientBrush>
            			</TextBlock.Background>
                        <Run FontWeight="Bold" Text="{Binding AncourTitle}" />
                        <LineBreak />
                        <Run Text="{Binding AncourIntroductionText}" />
                    </TextBlock>
                    <Button Style="{DynamicResource MetroCircleButtonStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="70" Height="70" Foreground="White" Background="#7F000000" BorderBrush="White">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <ei:LaunchUriOrFileAction Path="{Binding AncourUrl}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
            			<ContentControl Content="{DynamicResource appbar_play}" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Height="25" Style="{DynamicResource silhouetteStyle}"/>
            		</Button>
                </Grid>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AttachedAlbumViewModel}">
                <DataTemplate.Resources>
                    <Style x:Key="thumbListStyle" TargetType="{x:Type ItemsControl}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ItemsControl}">
                                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="True">
                                        <ScrollViewer Focusable="False" Padding="{TemplateBinding Padding}">
                                            <i:Interaction.Behaviors>
                                                <ctl:WheelScrollKillBehavior/>
                                            </i:Interaction.Behaviors>
                                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </ScrollViewer>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="ItemTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <Border x:Name="border" BorderThickness="1" Padding="2" BorderBrush="{StaticResource AccentColorBrush3}">
                                		<Image Height="70" Width="70" Source="{Binding Image, Mode=OneWay}" Stretch="UniformToFill" Cursor="Hand" >
                                			<i:Interaction.Triggers>
                                				<i:EventTrigger EventName="MouseLeftButtonDown">
                                					<ei:LaunchUriOrFileAction Path="{Binding LinkUrl}"/>
                                				</i:EventTrigger>
                                			</i:Interaction.Triggers>
                                		</Image>
                                	</Border>
                                	<DataTemplate.Triggers>
                                		<Trigger Property="IsMouseOver" Value="True">
                                			<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource AccentColorBrush}"/>
                                		</Trigger>
                                	</DataTemplate.Triggers>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal" />
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="thumbItemStyle" TargetType="{x:Type ContentPresenter}">
                        <Setter Property="Margin" Value="0,0,6,6"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                    </Style>
                    <Storyboard x:Key="thumbSlideinBoard">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="border">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                    <Storyboard x:Key="thumbSlideoutBoard">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="border">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="60">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </DataTemplate.Resources>
                <Grid d:DesignWidth="550" d:DesignHeight="300" Background="Black" ClipToBounds="True" Margin="0,0,0,5" d:DataContext="{d:DesignData /SampleData/AttachedAlbumViewModelSampleData.xaml}">
                    <Image x:Name="image" MaxWidth="{Binding Width}" MaxHeight="{Binding Height}" Source="{Binding LargeImage}" Cursor="Hand" >
                    	<i:Interaction.Triggers>
                    		<i:EventTrigger EventName="MouseLeftButtonDown">
                    			<ei:LaunchUriOrFileAction Path="{Binding LinkUrl}"/>
                    		</i:EventTrigger>
                    	</i:Interaction.Triggers>
                    </Image>
                    <Border x:Name="border" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Background="#B2000000" Margin="15,0,20,0" Padding="10,0,10,5" RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform Y="60"/>
                            </TransformGroup>
                        </Border.RenderTransform>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <TextBlock HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{Binding Title}" Foreground="White" Margin="0,10,0,0" FontWeight="Bold" />
                            <ItemsControl Grid.Row="1" Background="Transparent" Style="{DynamicResource thumbListStyle}" ItemsSource="{Binding ThumbnailImages}" ScrollViewer.VerticalScrollBarVisibility="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Auto" ItemContainerStyle="{DynamicResource thumbItemStyle}" BorderThickness="0" Margin="0,5,0,0" />
                        </Grid>
                    </Border>
                </Grid>
                <DataTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True" SourceName="border">
                        <Trigger.ExitActions>
                            <BeginStoryboard x:Name="thumbSlideoutBoard_BeginStoryboard" Storyboard="{StaticResource thumbSlideoutBoard}"/>
                        </Trigger.ExitActions>
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="thumbSlideinBoard_BeginStoryboard" Storyboard="{StaticResource thumbSlideinBoard}"/>
                        </Trigger.EnterActions>
                    </Trigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AttachedImageViewModel}">
                <Border Background="Black" Margin="0,0,0,5" d:DesignWidth="400" d:DesignHeight="300">
            		<Image MaxWidth="{Binding Width}" MaxHeight="{Binding Height}" Source="{Binding Image}" Cursor="Hand" >
            			<i:Interaction.Triggers>
            				<i:EventTrigger EventName="MouseLeftButtonDown">
            					<ei:LaunchUriOrFileAction Path="{Binding LinkUrl}"/>
            				</i:EventTrigger>
            			</i:Interaction.Triggers>
            		</Image>
            	</Border>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:AttachedActivityViewModel}">
                <Border BorderBrush="LightGray" BorderThickness="0,1,0,0" Margin="0,0,0,5" Padding="0,5,0,5">
                    <StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Image Width="25" Height="25" Source="{Binding OwnerIcon}" />
                            <TextBlock Margin="5,0,0,0" VerticalAlignment="Center" Style="{StaticResource postTextStyle}"><Run Text="最初に"/><Run Text="{Binding OwnerName}" Style="{StaticResource userNameTextStyle}" /><Run Text="さんが共有"/></TextBlock>
                        </StackPanel>
                        <TextBlock Margin="0,5,0,5" TextWrapping="Wrap" Style="{StaticResource postTextStyle}" >
                        	<i:Interaction.Behaviors>
                        		<ctl:SetInlineBehavior Element="{Binding PostContentInline}"/>
                        	</i:Interaction.Behaviors>
                        </TextBlock>
                        <ContentPresenter Content="{Binding AttachedContent}" />
                    </StackPanel>
                </Border>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:NotificationWithActivityViewModel}">
                <StackPanel x:Name="stackPanel" Margin="10" d:DataContext="{d:DesignData /SampleData/NotificationWithActivityViewModelSampleData.xaml}" d:DesignWidth="400" d:DesignHeight="300">
                    <StackPanel.Resources>
                        <Storyboard x:Key="feedinAnimeStoryboard">
            			<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="stackPanel">
            				<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
            				<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
            			</DoubleAnimationUsingKeyFrames>
            		</Storyboard>
                    </StackPanel.Resources>
                	<i:Interaction.Triggers>
                		<i:EventTrigger>
                			<i:Interaction.Behaviors>
                				<ei:ConditionBehavior>
                					<ei:ConditionalExpression>
                						<ei:ComparisonCondition LeftOperand="{Binding IsEnableInsertAnime}" RightOperand="True"/>
                					</ei:ConditionalExpression>
                				</ei:ConditionBehavior>
                			</i:Interaction.Behaviors>
                			<ei:ControlStoryboardAction Storyboard="{StaticResource feedinAnimeStoryboard}"/>
                		</i:EventTrigger>
                	</i:Interaction.Triggers>
                    <Border BorderThickness="0,0,0,1" BorderBrush="LightGray" Padding="0,0,0,8" Margin="0,0,0,5">
                        <TextBlock Text="{Binding NoticeText}" TextWrapping="Wrap" />
                    </Border>
                    <ContentPresenter Content="{Binding Target}" />
                </StackPanel>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:NotificationWithProfileViewModel}">
                <Border Name="border" Margin="10" BorderBrush="LightGray" BorderThickness="0,1,0,0" d:DataContext="{d:DesignData /SampleData/NotificationWithProfileViewModelSampleData.xaml}" d:DesignWidth="360" d:DesignHeight="720">
                    <Border.Resources>
                        <Storyboard x:Key="feedinAnimeStoryboard">
            			    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
            				    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
            				    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
            			    </DoubleAnimationUsingKeyFrames>
            		    </Storyboard>
                    </Border.Resources>
                	<i:Interaction.Triggers>
                		<i:EventTrigger>
                			<i:Interaction.Behaviors>
                				<ei:ConditionBehavior>
                					<ei:ConditionalExpression>
                						<ei:ComparisonCondition LeftOperand="{Binding IsEnableInsertAnime}" RightOperand="True"/>
                					</ei:ConditionalExpression>
                				</ei:ConditionBehavior>
                			</i:Interaction.Behaviors>
                			<ei:ControlStoryboardAction Storyboard="{StaticResource feedinAnimeStoryboard}"/>
                		</i:EventTrigger>
                	</i:Interaction.Triggers>
                    <StackPanel>
                        <ItemsControl ItemsSource="{Binding Members}" />
                    </StackPanel>
                </Border>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:ProfileRegisterViewModel}">
                <Border Margin="0,5,0,5" BorderBrush="LightGray" BorderThickness="1" d:DesignWidth="300" d:DesignHeight="150">
                    <Grid>
                        <StackPanel Margin="0">
                            <TextBlock Margin="10,5,5,3" Text="{Binding Name}" />
                            <Rectangle Height="65" Fill="Black" />
                            <TextBlock Margin="10,5,5,8" Text="x人の共通の知り合い" />
                        </StackPanel>
                        <StackPanel HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,10,10,10">
                            <Border BorderBrush="#fffafafa" BorderThickness="5" Width="90" Height="90" HorizontalAlignment="Right">
                                <Image Source="{Binding ProfileIconUrl}" />
                                <Border.Effect>
                                    <DropShadowEffect Color="Black" Direction="315" Opacity="0.3" BlurRadius="5" ShadowDepth="0" />
                                </Border.Effect>
                            </Border>
                            <Button HorizontalAlignment="Right" Margin="0,5,0,0" Padding="3">サークルに追加</Button>
                        </StackPanel>
                    </Grid>
                </Border>
            </DataTemplate>
        </ResourceDictionary>
    </Window.Resources>
    <controls:MetroWindow.Flyouts>
        <controls:FlyoutsControl>
            <controls:Flyout Header="Account" Background="Black" Foreground="White" IsOpen="{Binding IsAccountSelectorMode}" Position="Right" ContentTemplate="{DynamicResource accountListTemplate}" />
        </controls:FlyoutsControl>
    </controls:MetroWindow.Flyouts>
    <Grid d:DataContext="{d:DesignData /SampleData/MainViewModelSampleData.xaml}">
        <TabControl ItemsSource="{Binding Pages}" SelectedIndex="{Binding SelectedPageIndex, Mode=OneWay}" Style="{StaticResource pageSwitcherStyle}" ItemContainerStyle="{StaticResource accountStyle}" />
    </Grid>
</controls:MetroWindow>
